// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartAdmin.WebUI.Data;

namespace SmartAdmin.WebUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200308022947_renewal")]
    partial class renewal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartAdmin.WebUI.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("dtCreated");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CurrentLoginDateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("IdPosition");

                    b.Property<DateTime?>("LastLoginDateTime");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("fullName");

                    b.Property<string>("mobileNo");

                    b.Property<string>("picName");

                    b.Property<int?>("userDefaultBuildingCity");

                    b.Property<int?>("userDefaultBuildingCountry");

                    b.Property<int?>("userdefaultBuildingDistrict");

                    b.HasKey("Id");

                    b.HasIndex("IdPosition");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("userDefaultBuildingCity");

                    b.HasIndex("userDefaultBuildingCountry");

                    b.HasIndex("userdefaultBuildingDistrict");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.BuildingFloors", b =>
                {
                    b.Property<int>("IdBuildingFloor")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PropertyFloorName")
                        .IsRequired();

                    b.HasKey("IdBuildingFloor");

                    b.ToTable("TBuildingFloors");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Buildings", b =>
                {
                    b.Property<int>("IdBuilding")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingAddress")
                        .IsRequired();

                    b.Property<int>("BuildingArea");

                    b.Property<string>("BuildingName")
                        .IsRequired();

                    b.Property<string>("BuildingNotes");

                    b.Property<string>("BuildingPicture");

                    b.Property<int>("BuildingValue");

                    b.Property<int>("BuildingYear");

                    b.Property<int>("BuildingYearlyIncome");

                    b.Property<bool>("ForFamilies");

                    b.Property<float?>("GPSLatitude");

                    b.Property<string>("GPSLink");

                    b.Property<float?>("GPSLongitude");

                    b.Property<int>("IDOwner");

                    b.Property<int>("IdCity");

                    b.Property<int>("IdCountry");

                    b.Property<string>("IdCreatedBy");

                    b.Property<int>("IdDistrict");

                    b.Property<string>("IdModifiedBy");

                    b.Property<string>("MeterWaterNumber");

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtModified");

                    b.HasKey("IdBuilding");

                    b.HasIndex("IDOwner");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdCreatedBy");

                    b.HasIndex("IdDistrict");

                    b.HasIndex("IdModifiedBy");

                    b.ToTable("TBuildings");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Cities", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired();

                    b.Property<int>("IdCountry");

                    b.HasKey("IdCity");

                    b.HasIndex("IdCountry");

                    b.ToTable("TCities");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Companies", b =>
                {
                    b.Property<int>("IdCompany")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("companyAddress");

                    b.Property<string>("companyName")
                        .IsRequired();

                    b.Property<string>("compayPhone");

                    b.HasKey("IdCompany");

                    b.ToTable("TCompanies");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundBuildings", b =>
                {
                    b.Property<int>("IdBuilding")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingAddress");

                    b.Property<int?>("BuildingArea");

                    b.Property<string>("BuildingNotes");

                    b.Property<string>("BuildingNumber")
                        .IsRequired();

                    b.Property<string>("BuildingPicture");

                    b.Property<int>("BuildingValue");

                    b.Property<int>("BuildingYear");

                    b.Property<int>("BuildingYearlyIncome");

                    b.Property<bool>("ForFamilies");

                    b.Property<float?>("GPSLatitude");

                    b.Property<string>("GPSLink");

                    b.Property<float?>("GPSLongitude");

                    b.Property<int>("IDOwner");

                    b.Property<int>("IdCompound");

                    b.Property<string>("IdCreatedBy");

                    b.Property<string>("IdModifiedBy");

                    b.Property<string>("MeterWaterNumber");

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtModified");

                    b.HasKey("IdBuilding");

                    b.HasIndex("IDOwner");

                    b.HasIndex("IdCompound");

                    b.HasIndex("IdCreatedBy");

                    b.HasIndex("IdModifiedBy");

                    b.ToTable("TCompoundBuildings");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Compounds", b =>
                {
                    b.Property<int>("IdCompound")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdCreated");

                    b.Property<int>("IdDistrict");

                    b.Property<string>("IdModified");

                    b.Property<string>("Notes");

                    b.Property<string>("compoundName")
                        .IsRequired();

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtModified");

                    b.Property<bool>("oneWaterMeterAllBld");

                    b.Property<string>("serviceWaterMeterNo");

                    b.Property<string>("waterMeterAllBldNo");

                    b.HasKey("IdCompound");

                    b.HasIndex("IdCreated");

                    b.HasIndex("IdDistrict");

                    b.HasIndex("IdModified");

                    b.ToTable("TCompounds");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundsUsers", b =>
                {
                    b.Property<int>("IdCompoundUser")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCompound");

                    b.Property<string>("IdUser");

                    b.HasKey("IdCompoundUser");

                    b.HasIndex("IdCompound");

                    b.HasIndex("IdUser");

                    b.ToTable("TCompoundsUsers");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundUnitKeys", b =>
                {
                    b.Property<int>("IdUnitKeys")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMandoob");

                    b.Property<int>("IdUnit");

                    b.Property<DateTime?>("dtBack");

                    b.Property<DateTime?>("dtTaken");

                    b.Property<bool>("isTheKeyAvailable");

                    b.HasKey("IdUnitKeys");

                    b.HasIndex("IdMandoob");

                    b.HasIndex("IdUnit");

                    b.ToTable("TCompoundUnitKeys");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundUnits", b =>
                {
                    b.Property<int>("IdUnit")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ElectricityNo");

                    b.Property<string>("ElectricitySadadNo");

                    b.Property<bool>("Forfamilies");

                    b.Property<int>("IdBuilding");

                    b.Property<string>("IdCreatedBy");

                    b.Property<int>("IdFloor");

                    b.Property<int?>("IdMandoob");

                    b.Property<string>("IdModifiedBy");

                    b.Property<int>("IdPropertyType");

                    b.Property<int?>("IdRentContract");

                    b.Property<int?>("IdUnitKey");

                    b.Property<int>("NUmberofRooms");

                    b.Property<int>("NoOfBaths");

                    b.Property<string>("Notes");

                    b.Property<int>("NuberofLivings");

                    b.Property<int>("NumberofMajlis");

                    b.Property<int>("RentRate");

                    b.Property<int?>("UnitArea");

                    b.Property<string>("UnitNumber")
                        .IsRequired();

                    b.Property<DateTime?>("dtBack");

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtModified");

                    b.Property<DateTime?>("dtTaken");

                    b.Property<bool>("isDeleted");

                    b.Property<bool?>("isRented");

                    b.Property<bool?>("isTheKeyAvailable");

                    b.Property<int?>("unitCondition");

                    b.HasKey("IdUnit");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdCreatedBy");

                    b.HasIndex("IdFloor");

                    b.HasIndex("IdMandoob");

                    b.HasIndex("IdModifiedBy");

                    b.HasIndex("IdPropertyType");

                    b.ToTable("TCompoundUnits");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Countries", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired();

                    b.Property<string>("CountryNameCapitalLetters")
                        .IsRequired();

                    b.Property<string>("ISO")
                        .IsRequired();

                    b.Property<string>("ISO3")
                        .IsRequired();

                    b.Property<int>("NumCode");

                    b.Property<int>("PhoneCode");

                    b.HasKey("IdCountry");

                    b.ToTable("TCountries");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.DBJobHistory", b =>
                {
                    b.Property<int>("IdDBJobHistory")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dtLastExecuted");

                    b.Property<bool>("statusFlag");

                    b.HasKey("IdDBJobHistory");

                    b.ToTable("TDBJobHistory");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.DBJobs", b =>
                {
                    b.Property<int>("IdJob")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("JobFrequency");

                    b.Property<string>("JobName");

                    b.Property<DateTime>("dtLastPerformed");

                    b.HasKey("IdJob");

                    b.ToTable("TDBJobs");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Districts", b =>
                {
                    b.Property<int>("IdDistrict")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictName")
                        .IsRequired();

                    b.Property<int>("IdCity");

                    b.HasKey("IdDistrict");

                    b.HasIndex("IdCity");

                    b.ToTable("TDistricts");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Model.Employees", b =>
                {
                    b.Property<int>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdCreated");

                    b.Property<string>("IdModified");

                    b.Property<int>("IdNationality");

                    b.Property<int>("IdWorkPlace");

                    b.Property<string>("Notes")
                        .HasMaxLength(512);

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime?>("dtDateOfBirth");

                    b.Property<DateTime>("dtIqamaExpiryDate");

                    b.Property<DateTime>("dtJoiningDate");

                    b.Property<DateTime>("dtModified");

                    b.Property<DateTime>("dtcontractExpiryDate");

                    b.Property<DateTime>("dtpassPortExpiry");

                    b.Property<string>("eMail")
                        .HasMaxLength(50);

                    b.Property<string>("empPicture")
                        .HasMaxLength(250);

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("gender");

                    b.Property<string>("iqamaNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("iqamaPic");

                    b.Property<int>("isDeleted");

                    b.Property<string>("jobTitle")
                        .HasMaxLength(250);

                    b.Property<string>("mobile")
                        .HasMaxLength(50);

                    b.Property<string>("passPortPic")
                        .HasMaxLength(250);

                    b.Property<string>("passportNumber")
                        .HasMaxLength(50);

                    b.HasKey("IdEmployee");

                    b.HasIndex("IdCreated");

                    b.HasIndex("IdModified");

                    b.HasIndex("IdNationality");

                    b.HasIndex("IdWorkPlace");

                    b.ToTable("TEmployees");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Mandoobs", b =>
                {
                    b.Property<int>("IdMandoob")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("mandoobMobile")
                        .IsRequired();

                    b.Property<string>("mandoobName")
                        .IsRequired();

                    b.Property<string>("mandoobNotes");

                    b.HasKey("IdMandoob");

                    b.ToTable("TMandoobs");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.MetersElectricityInfo", b =>
                {
                    b.Property<int>("IdMeter")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdUnit");

                    b.Property<string>("MeterNotes");

                    b.Property<string>("MeterNumber");

                    b.HasKey("IdMeter");

                    b.HasIndex("IdUnit");

                    b.ToTable("TMeterElectricityInfo");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.MeterWaterInfo", b =>
                {
                    b.Property<int>("IdMeter")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdBuilding");

                    b.Property<string>("MeterNotes");

                    b.Property<string>("MeterNumber");

                    b.HasKey("IdMeter");

                    b.HasIndex("IdBuilding");

                    b.ToTable("TMeterWaterInfo");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Nationalities", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired();

                    b.Property<string>("CountryNameCapitalLetters")
                        .IsRequired();

                    b.Property<string>("ISO")
                        .IsRequired();

                    b.Property<string>("ISO3")
                        .IsRequired();

                    b.Property<int>("NumCode");

                    b.Property<int>("PhoneCode");

                    b.HasKey("IdCountry");

                    b.ToTable("TNationalities");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Owners", b =>
                {
                    b.Property<int>("IdOwner")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.Property<string>("ContactName")
                        .IsRequired();

                    b.Property<string>("ContactPhone")
                        .IsRequired();

                    b.Property<string>("IdCreatedBy");

                    b.Property<string>("IdModifiedBy");

                    b.Property<string>("OwnerAddress")
                        .IsRequired();

                    b.Property<string>("OwnerMobile")
                        .IsRequired();

                    b.Property<string>("OwnerName")
                        .IsRequired();

                    b.Property<string>("OwnerNnotes");

                    b.Property<string>("OwnerPhone");

                    b.Property<string>("Owneremail");

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtModified");

                    b.HasKey("IdOwner");

                    b.HasIndex("IdCreatedBy");

                    b.HasIndex("IdModifiedBy");

                    b.ToTable("TOwners");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.PropertyTypes", b =>
                {
                    b.Property<int>("IdPropertyType")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PropertyTypeName")
                        .IsRequired();

                    b.HasKey("IdPropertyType");

                    b.ToTable("TPropertyTypes");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Tenants", b =>
                {
                    b.Property<int>("IdTenant")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCompany");

                    b.Property<string>("IdCreatedBy");

                    b.Property<string>("IdLetterPicture");

                    b.Property<string>("IdModifiedBy");

                    b.Property<int>("IdNationality");

                    b.Property<string>("IqamaExpirationHijri");

                    b.Property<string>("IqamaNo");

                    b.Property<string>("IqamaPicture");

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtIqamaExpiration");

                    b.Property<DateTime>("dtModified");

                    b.Property<string>("emergencyPhone");

                    b.Property<bool>("isMarried");

                    b.Property<string>("tenantEmail");

                    b.Property<int>("tenantFamilycount");

                    b.Property<string>("tenantMobile")
                        .IsRequired();

                    b.Property<string>("tenantName")
                        .IsRequired();

                    b.Property<string>("tenantsNotes");

                    b.Property<string>("workNotes");

                    b.HasKey("IdTenant");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdCreatedBy");

                    b.HasIndex("IdModifiedBy");

                    b.HasIndex("IdNationality");

                    b.ToTable("TTenants");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.TPositions", b =>
                {
                    b.Property<int>("IdPosition")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("positionName_E")
                        .IsRequired();

                    b.Property<string>("positionName_a")
                        .IsRequired();

                    b.HasKey("IdPosition");

                    b.ToTable("TPosition");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.UnitKeys", b =>
                {
                    b.Property<int>("IdUnitKeys")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMandoob");

                    b.Property<int>("IdUnit");

                    b.Property<DateTime?>("dtBack");

                    b.Property<DateTime?>("dtTaken");

                    b.Property<bool>("isTheKeyAvailable");

                    b.HasKey("IdUnitKeys");

                    b.HasIndex("IdMandoob");

                    b.HasIndex("IdUnit");

                    b.ToTable("TUnitKeys");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.UnitRentContract", b =>
                {
                    b.Property<int>("IdRentContract")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived");

                    b.Property<int?>("IdCompound");

                    b.Property<string>("IdCreated");

                    b.Property<string>("IdModified");

                    b.Property<int>("IdTenant");

                    b.Property<int?>("IdUnit");

                    b.Property<int?>("IdUnitCompound");

                    b.Property<int?>("PrevIdRentContract");

                    b.Property<int?>("WaterBillAmount");

                    b.Property<int?>("WaterPaidAmount");

                    b.Property<int?>("WaterRemainingAmount");

                    b.Property<bool>("attestedRentContract");

                    b.Property<string>("contractImage");

                    b.Property<string>("contractNumber")
                        .IsRequired();

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtLeaseEnd");

                    b.Property<DateTime>("dtLeaseStart");

                    b.Property<DateTime>("dtModified");

                    b.Property<bool>("electricityBillIncluded");

                    b.Property<int?>("finalElectricityMeterReading");

                    b.Property<int?>("finalWaterMeterReading");

                    b.Property<bool>("furnishedUnit");

                    b.Property<int?>("initialElectricityMeterReading");

                    b.Property<int?>("initialWaterMeterReading");

                    b.Property<int>("insurance");

                    b.Property<int?>("leasePeriodInMonthes");

                    b.Property<int>("paidAmount");

                    b.Property<int>("paymentMethod");

                    b.Property<int>("remainingAmount");

                    b.Property<decimal>("rentCommission");

                    b.Property<string>("unitAccountNumber");

                    b.Property<bool>("waterBillIncluded");

                    b.Property<int>("yearlyRent");

                    b.HasKey("IdRentContract");

                    b.HasIndex("IdCompound");

                    b.HasIndex("IdCreated");

                    b.HasIndex("IdModified");

                    b.HasIndex("IdTenant");

                    b.HasIndex("IdUnit");

                    b.HasIndex("IdUnitCompound");

                    b.HasIndex("PrevIdRentContract");

                    b.ToTable("TUnitRentContract");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Units", b =>
                {
                    b.Property<int>("IdUnit")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompaniesIdCompany");

                    b.Property<string>("ElectricityNo");

                    b.Property<string>("ElectricitySadadNo");

                    b.Property<bool>("Forfamilies");

                    b.Property<int>("IdBuilding");

                    b.Property<string>("IdCreatedBy");

                    b.Property<int>("IdFloor");

                    b.Property<int?>("IdMandoob");

                    b.Property<string>("IdModifiedBy");

                    b.Property<int>("IdPropertyType");

                    b.Property<int?>("IdRentContract");

                    b.Property<int?>("IdUnitKey");

                    b.Property<int>("NUmberofRooms");

                    b.Property<int>("NoOfBaths");

                    b.Property<string>("Notes");

                    b.Property<int>("NuberofLivings");

                    b.Property<int>("NumberofMajlis");

                    b.Property<int>("RentRate");

                    b.Property<int?>("UnitArea");

                    b.Property<string>("UnitNumber")
                        .IsRequired();

                    b.Property<DateTime?>("dtBack");

                    b.Property<DateTime>("dtCreated");

                    b.Property<DateTime>("dtModified");

                    b.Property<DateTime?>("dtTaken");

                    b.Property<bool>("isDeleted");

                    b.Property<bool?>("isRented");

                    b.Property<bool?>("isTheKeyAvailable");

                    b.Property<int?>("unitCondition");

                    b.HasKey("IdUnit");

                    b.HasIndex("CompaniesIdCompany");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdCreatedBy");

                    b.HasIndex("IdFloor");

                    b.HasIndex("IdMandoob");

                    b.HasIndex("IdModifiedBy");

                    b.HasIndex("IdPropertyType");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.WorkPlaces", b =>
                {
                    b.Property<int>("IdWorkPlace")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("notes")
                        .HasMaxLength(250);

                    b.Property<string>("workPlace")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("IdWorkPlace");

                    b.ToTable("TWorkplaces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.ApplicationUser", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.TPositions", "TPosition")
                        .WithMany("appUsers")
                        .HasForeignKey("IdPosition")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Cities", "TCity")
                        .WithMany()
                        .HasForeignKey("userDefaultBuildingCity");

                    b.HasOne("SmartAdmin.WebUI.Countries", "TCountry")
                        .WithMany()
                        .HasForeignKey("userDefaultBuildingCountry");

                    b.HasOne("SmartAdmin.WebUI.Districts", "Districts")
                        .WithMany()
                        .HasForeignKey("userdefaultBuildingDistrict");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Buildings", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Owners", "mOwner")
                        .WithMany()
                        .HasForeignKey("IDOwner")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Cities", "mCity")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Countries", "mCountry")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserCreated")
                        .WithMany()
                        .HasForeignKey("IdCreatedBy");

                    b.HasOne("SmartAdmin.WebUI.Districts", "mDistrict")
                        .WithMany("mBuildings")
                        .HasForeignKey("IdDistrict")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserModified")
                        .WithMany()
                        .HasForeignKey("IdModifiedBy");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Cities", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Countries", "mBuildingCountry")
                        .WithMany("mCities")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundBuildings", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Owners", "mOwner")
                        .WithMany()
                        .HasForeignKey("IDOwner")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Compounds", "mCompound")
                        .WithMany()
                        .HasForeignKey("IdCompound")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserCreated")
                        .WithMany()
                        .HasForeignKey("IdCreatedBy");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserModified")
                        .WithMany()
                        .HasForeignKey("IdModifiedBy");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Compounds", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserCreated")
                        .WithMany()
                        .HasForeignKey("IdCreated");

                    b.HasOne("SmartAdmin.WebUI.Districts", "mDistrict")
                        .WithMany()
                        .HasForeignKey("IdDistrict")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserModified")
                        .WithMany()
                        .HasForeignKey("IdModified");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundsUsers", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Compounds", "mCompound")
                        .WithMany("mCompoundUsers")
                        .HasForeignKey("IdCompound")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUser")
                        .WithMany("mCompoundUsers")
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundUnitKeys", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Mandoobs", "mMandoob")
                        .WithMany()
                        .HasForeignKey("IdMandoob")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.CompoundUnits", "mCompoundUnit")
                        .WithMany("mCompoundUnitKeys")
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.CompoundUnits", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.CompoundBuildings", "mCompoundBuilding")
                        .WithMany("mCompoundUnits")
                        .HasForeignKey("IdBuilding")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserCreated")
                        .WithMany()
                        .HasForeignKey("IdCreatedBy");

                    b.HasOne("SmartAdmin.WebUI.BuildingFloors", "mFloor")
                        .WithMany()
                        .HasForeignKey("IdFloor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Mandoobs", "mMandoob")
                        .WithMany()
                        .HasForeignKey("IdMandoob");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserModified")
                        .WithMany()
                        .HasForeignKey("IdModifiedBy");

                    b.HasOne("SmartAdmin.WebUI.PropertyTypes", "mPropertyType")
                        .WithMany()
                        .HasForeignKey("IdPropertyType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Districts", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Cities", "mCity")
                        .WithMany("mDistricts")
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Model.Employees", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mCreatedBy")
                        .WithMany()
                        .HasForeignKey("IdCreated");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mModifiedBy")
                        .WithMany()
                        .HasForeignKey("IdModified");

                    b.HasOne("SmartAdmin.WebUI.Nationalities", "Tnationality")
                        .WithMany()
                        .HasForeignKey("IdNationality")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.WorkPlaces", "mWorkPlace")
                        .WithMany()
                        .HasForeignKey("IdWorkPlace")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.MetersElectricityInfo", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Units", "mUnits")
                        .WithMany()
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.MeterWaterInfo", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Buildings", "mBuilding")
                        .WithMany()
                        .HasForeignKey("IdBuilding")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Owners", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserCreated")
                        .WithMany()
                        .HasForeignKey("IdCreatedBy");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserModified")
                        .WithMany()
                        .HasForeignKey("IdModifiedBy");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Tenants", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Companies", "mCompany")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserCreated")
                        .WithMany()
                        .HasForeignKey("IdCreatedBy");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserModified")
                        .WithMany()
                        .HasForeignKey("IdModifiedBy");

                    b.HasOne("SmartAdmin.WebUI.Nationalities", "mNationality")
                        .WithMany("mTenants")
                        .HasForeignKey("IdNationality")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.UnitKeys", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Mandoobs", "mMandoob")
                        .WithMany("mUnitKeys")
                        .HasForeignKey("IdMandoob")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Units", "mUnit")
                        .WithMany("mUnitKey")
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartAdmin.WebUI.UnitRentContract", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Compounds", "mCompound")
                        .WithMany()
                        .HasForeignKey("IdCompound");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mCreatedBy")
                        .WithMany()
                        .HasForeignKey("IdCreated");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mModifiedBy")
                        .WithMany()
                        .HasForeignKey("IdModified");

                    b.HasOne("SmartAdmin.WebUI.Tenants", "mTenant")
                        .WithMany()
                        .HasForeignKey("IdTenant")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Units", "mUnit")
                        .WithMany()
                        .HasForeignKey("IdUnit");

                    b.HasOne("SmartAdmin.WebUI.CompoundUnits", "mCompoundUnits")
                        .WithMany()
                        .HasForeignKey("IdUnitCompound");

                    b.HasOne("SmartAdmin.WebUI.UnitRentContract", "Prev")
                        .WithMany()
                        .HasForeignKey("PrevIdRentContract");
                });

            modelBuilder.Entity("SmartAdmin.WebUI.Units", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.Companies")
                        .WithMany("mUnits")
                        .HasForeignKey("CompaniesIdCompany");

                    b.HasOne("SmartAdmin.WebUI.Buildings", "mBuilding")
                        .WithMany("mUnits")
                        .HasForeignKey("IdBuilding")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserCreated")
                        .WithMany()
                        .HasForeignKey("IdCreatedBy");

                    b.HasOne("SmartAdmin.WebUI.BuildingFloors", "mFloor")
                        .WithMany("mUnits")
                        .HasForeignKey("IdFloor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.Mandoobs", "mMandoob")
                        .WithMany()
                        .HasForeignKey("IdMandoob");

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser", "mUserModified")
                        .WithMany()
                        .HasForeignKey("IdModifiedBy");

                    b.HasOne("SmartAdmin.WebUI.PropertyTypes", "mPropertyType")
                        .WithMany("mUnits")
                        .HasForeignKey("IdPropertyType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartAdmin.WebUI.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartAdmin.WebUI.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
